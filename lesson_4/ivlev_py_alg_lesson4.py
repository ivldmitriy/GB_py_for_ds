# -*- coding: utf-8 -*-
"""ivlev_py_alg_lesson4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jjXak26P4ZbfVGozCJ07IbUUT0jFye-J

#Тема “Обучение без учителя”

##Задание 1
"""

#Импортирую основные библиотеки
import numpy as np
import pandas as pd

# Commented out IPython magic to ensure Python compatibility.
#Импортирую matplotlib
from matplotlib import pyplot as plt
# %config InlineBackend.figure_format = 'svg'
# %matplotlib inline

#Импортирую нужные модули из sklearn
from sklearn.datasets import load_boston
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.manifold import TSNE
from sklearn.cluster import KMeans

#Импортирую датасет
boston = load_boston()
print(f'Ключи от датасета: {boston.keys()}')
data = boston.data
feature_names = boston.feature_names
target = boston.target

#Готовлю данные
X = pd.DataFrame(data, columns=feature_names)
y = pd.DataFrame(target, columns=['price'])
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#Масштабирую
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

#Создаю масштабированные (стандартизованные: среднее ноль, стандартное отклонение 1) датафреймы
X_train_scaled = pd.DataFrame(X_train_scaled, columns=feature_names)
X_test_scaled = pd.DataFrame(X_test_scaled, columns=feature_names)

#Строю модель TSNE на тренировочных данных с заданными параметрами
tsne_model = TSNE(n_components=2, learning_rate=250, random_state=42)
X_train_tsne = tsne_model.fit_transform(X_train_scaled)

#Строю диаграмму рассеяния полученных данных
plt.scatter(X_train_tsne[:, 0], X_train_tsne[:, 1])
plt.show()

"""##Задание 2"""

#Создаю модель
kmeans = KMeans(n_clusters=3, max_iter=100, random_state=42)

#Разбиваю обучающий набор на кластеры
labels_train = kmeans.fit_predict(X_train_scaled)

pd.value_counts(labels_train)

#Строю диаграмму рассеяния полученных данных, раскрашенную по кластерам
plt.scatter(X_train_tsne[:, 0], X_train_tsne[:, 1], c=labels_train)
plt.show()

#Рассчитываю средний уровень цен на недвижимость по кластерам
price_rate = []
for i in set(labels_train):
  mean_price = y_train[labels_train==i].mean()
  price_rate.append(mean_price.loc['price'])
  print(f'Средняя цена на недвижимость из кластера {i} равна {price_rate[i]:.2f}')

#Изображаю средние уровни цен на столбчатой диаграмме
plt.bar([f'Cluster_{name}' for name in set(labels_train)], price_rate)
plt.title('Price rate')
plt.show()

#Рассчитываю средний уровень преступности по кластерам
criminal_rate = []
for i in set(labels_train):
  criminal_rate.append(X_train.loc[labels_train == i, 'CRIM'].mean())
  print(f'Средний рейтинг преступности для недвижимости из кластера {i} равен {criminal_rate[i]:.2f}')

#Изображаю средние уровни преступности на столбчатой диаграмме
plt.bar([f'Cluster_{name}' for name in set(labels_train)], criminal_rate)
plt.title('Criminal rate')
plt.show()

"""##*Задание 3

Примените модель KMeans, построенную в предыдущем задании, к данным из тестового набора. Вычислите средние значения price и CRIM в разных кластерах на тестовых данных.
"""

#Разбиваю тестовый набор на кластеры
labels_test = kmeans.predict(X_test_scaled)

#Рассчитываю средний уровень цен на недвижимость по кластерам в тестовых данных
test_price_rate = []
print('Анализирую тестовые данные:')
for i in set(labels_test):
  mean_price = y_test[labels_test==i].mean()
  test_price_rate.append(mean_price.loc['price'])
  print(f'Средняя цена на недвижимость из кластера {i} равна {test_price_rate[i]:.2f}')

#Изображаю средние уровни цен на столбчатой диаграмме
plt.bar([f'Cluster_{name}' for name in set(labels_test)], test_price_rate)
plt.title('Price rate (TEST DATA)')
plt.show()

#Рассчитываю средний уровень преступности по кластерам
test_criminal_rate = []
print('Анализирую тестовые данные:')
for i in set(labels_test):
  test_criminal_rate.append(X_test.loc[labels_test == i, 'CRIM'].mean())
  print(f'Средний рейтинг преступности для недвижимости из кластера {i} равен {test_criminal_rate[i]:.2f}')

#Изображаю средние уровни преступности на столбчатой диаграмме
plt.bar([f'Cluster_{name}' for name in set(labels_test)], test_criminal_rate)
plt.title('Criminal rate (TEST DATA)')
plt.show()

